/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/Marker.java:67: Warning: By convention, the custom view (Marker) and the declare-styleable (DiscreteSeekBar) should have the same name (various editor features rely on this convention) [CustomViewStyleable]
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.DiscreteSeekBar,
                                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "CustomViewStyleable":
   The convention for custom views is to use a declare-styleable whose name
   matches the custom view class name. The IDE relies on this convention such
   that for example code completion can be offered for attributes in a custom
   view in layout XML resource files.

   (Similarly, layout parameter classes should use the suffix _Layout.)

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/PopupIndicator.java:107: Error: Must be one or more of: Gravity.FILL, Gravity.FILL_HORIZONTAL, Gravity.FILL_VERTICAL, Gravity.START, Gravity.END, Gravity.LEFT, Gravity.RIGHT, Gravity.TOP, Gravity.BOTTOM, Gravity.CENTER, Gravity.CENTER_HORIZONTAL, Gravity.CENTER_VERTICAL, Gravity.DISPLAY_CLIP_HORIZONTAL, Gravity.DISPLAY_CLIP_VERTICAL, Gravity.CLIP_HORIZONTAL, Gravity.CLIP_VERTICAL, Gravity.NO_GRAVITY [WrongConstant]
            p.gravity = Gravity.TOP | GravityCompat.START;
                                      ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "WrongConstant":
   Ensures that when parameter in a method only allows a specific set of
   constants, calls obey those rules.

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/AnimatorCompat.java:55: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/AnimatorCompatV11.java:30: Warning: Unnecessary; SDK_INT is always >= 11 [ObsoleteSdkInt]
@TargetApi(Build.VERSION_CODES.HONEYCOMB)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/DiscreteSeekBar.java:125: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
    private static final boolean isLollipopOrGreater = Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/Marker.java:100: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:49: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:62: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:75: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:93: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:111: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:126: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:132: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompat.java:139: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/compat/SeekBarCompatDontCrash.java:38: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
@TargetApi(21)
~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/Marker.java:49: Warning: Custom view Marker is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int) [ViewConstructor]
public class Marker extends ViewGroup implements MarkerDrawable.MarkerAnimationListener {
             ~~~~~~

   Explanation for issues of type "ViewConstructor":
   Some layout tools (such as the Android layout editor) need to find a
   constructor with one of the following signatures:
   * View(Context context)
   * View(Context context, AttributeSet attrs)
   * View(Context context, AttributeSet attrs, int defStyle)

   If your custom view needs to perform initialization which does not apply
   when used in a layout editor, you can surround the given code with a check
   to see if View#isInEditMode() is false, since that method will return false
   at runtime but true within a user interface editor.

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/DiscreteSeekBar.java:703: Warning: Custom view DiscreteSeekBar overrides onTouchEvent but not performClick [ClickableViewAccessibility]
    public boolean onTouchEvent(MotionEvent event) {
                   ~~~~~~~~~~~~

   Explanation for issues of type "ClickableViewAccessibility":
   If a View that overrides onTouchEvent or uses an OnTouchListener does not
   also implement performClick and call it when clicks are detected, the View
   may not handle accessibility actions properly. Logic handling the click
   actions should ideally be placed in View#performClick as some accessibility
   services invoke performClick when a click action should occur.

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/Marker.java:109: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
        mNumber.setText("-" + maxValue);
                        ~~~~~~~~~~~~~~

   Explanation for issues of type "SetTextI18n":
   When calling TextView#setText
   * Never call Number#toString() to format numbers; it will not handle
   fraction separators and locale-specific digits properly. Consider using
   String#format with proper format specifications (%d or %f) instead.
   * Do not pass a string literal (e.g. "Hello") to display text. Hardcoded
   text can not be properly translated to other languages. Consider using
   Android resource strings instead.
   * Do not build messages by concatenating text chunks. Such messages can not
   be properly translated.

   https://developer.android.com/guide/topics/resources/localization.html

/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/Marker.java:118: Warning: Use "Gravity.START" instead of "Gravity.LEFT" to ensure correct behavior in right-to-left locales [RtlHardcoded]
        addView(mNumber, new FrameLayout.LayoutParams(mWidth, mWidth, Gravity.LEFT | Gravity.TOP));
                                                                              ~~~~
/Users/hannes/git/discreteSeekBar/library/src/main/java/org/adw/library/widgets/discreteseekbar/internal/PopupIndicator.java:220: Warning: Use "Gravity.START" instead of "Gravity.LEFT" to ensure correct behavior in right-to-left locales [RtlHardcoded]
            addView(mMarker, new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP));
                                                                                                                                ~~~~

   Explanation for issues of type "RtlHardcoded":
   Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is
   rendered in locales where text flows from right to left. Use Gravity#START
   and Gravity#END instead. Similarly, in XML gravity and layout_gravity
   attributes, use start rather than left.

   For XML attributes such as paddingLeft and layout_marginLeft, use
   paddingStart and layout_marginStart. NOTE: If your minSdkVersion is less
   than 17, you should add both the older left/right attributes as well as the
   new start/end attributes. On older platforms, where RTL is not supported
   and the start/end attributes are unknown and therefore ignored, you need
   the older left/right attributes. There is a separate lint check which
   catches that type of error.

   (Note: For Gravity#LEFT and Gravity#START, you can use these constants even
   when targeting older platforms, because the start bitmask is a superset of
   the left bitmask. Therefore, you can use gravity="start" rather than
   gravity="left|start".)

1 errors, 19 warnings
